// procs_utils.h -- Utility functions for the procs_full energy term
// Copyright (C) 2010 by Anders Christensen.
//
// This file is part of Phaistos
//
// Phaistos is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Phaistos is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Phaistos.  If not, see <http://www.gnu.org/licenses/>.

#ifndef PROCS_UTILS
#define PROCS_UTILS

#include "energy/energy_term.h"
//#include "utils/sidechain_enums.h"

#include <iostream>
#include <vector>
#include <cmath>
#include <string.h>

namespace phaistos {

//Constants
//const double Pi = 3.14159265358979323846264338327950288;
const double e = 2.71828182845904523536;
const double HB_cutoff = 2.5;
const double RC_cutoff = 8.0;

class Atom_shift{
        public:        
                int res;
                double value;

};

int isNum(char c)
{
        if ( c < '0' || c > '9' ) return 0; 
        return c - '0';
}

void Get_bcsfile(std::string filename, std::vector<Atom_shift>& Shift_list) {
//   filename = "/home/andersx/phaistos/targets/1et1_1.bcs";
//   std::cout << filename << std::endl;
   std::string line;
   std::ifstream myfile (filename.c_str());
//   std::cout << myfile << std::endl;
   int n = 1;
   if (myfile.is_open()) {
      while (! myfile.eof()) {
         Atom_shift current_shift;
         Atom_shift dummy_shift;
         dummy_shift.value = 0.0;
         char tmpchar[20];
         getline (myfile,line);
         if(sscanf(line.c_str(), "%s %d %lf", tmpchar, &current_shift.res, &current_shift.value) != 3) 
            continue;
//         std::cout << current_shift.res << "  " << current_shift.value << std::endl;
         if (current_shift.res == n) {
            Shift_list.push_back(current_shift);
         } else {
            while (current_shift.res > n) {
               dummy_shift.res = n;
               Shift_list.push_back(dummy_shift);
               n = n + 1;
            }
            Shift_list.push_back(current_shift);
         }
         n = n + 1;
      }
      myfile.close();
   }
   else {
           std::cout << "Error: could not read chemical shift file " << filename << "\n";
           exit(1);
   }
}



class Class_Ring{         //A class that holds the intensity, center and normal vector for
   public:            //an aromatic ring.
      double Intensity;
      Vector_3D XYZ;
      Vector_3D Direction;

};

class Data_Point{
   public:
      double Exp;
      double Calc;
      double Stdev;
};

//Backbone conformational term by Czinki et al. (2004)
double dBackbone_Czinki(double phi, double psi)
{
   phi = (phi + M_PI)/2;
   psi = (psi + M_PI)/2;
   double a =    4.8361;
   double b[10] =   {0.0256,  0.4592,  0.1984, -0.1214, -0.1250,  0.1929, -0.0457, -0.0202, -0.0151, -0.0189};
   double c[10] =   {0.0912,  0.1343, -0.0091,  0.1169, -0.0259,  0.0722,  0.0015, -0.0137, -0.0174,  0.0092};

   double d[9][9] = {{-0.3898,  0.0364, -0.0770, -0.0175,  0.1608, -0.0005,  0.0963,  0.0116,  0.0619},
           { 0.0227,  0.6617,  0.0079,  0.2755,  0.0268,  0.1250, -0.0085,  0.0254,  0.0000},
           { 0.3494,  0.0076, -0.0237, -0.0553, -0.1020,  0.0067, -0.0794,  0.0000,  0.0000},
           { 0.0223,  0.1552, -0.0001,  0.0719, -0.0035,  0.0366,  0.0000,  0.0000,  0.0000},
           { 0.0215, -0.0927, -0.0558,  0.0137,  0.0444,  0.0000,  0.0000,  0.0000,  0.0000},
           {-0.0290, -0.0438, -0.0337,  0.0356,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000},
           { 0.0425,  0.0305,  0.0694,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000},
           { 0.0151, -0.0633,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000},
           {-0.0339,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000}};

   double First_sum = 0.0;

   for (int i = 0; i < 10; i++){
      double n = double(i + 1);
      First_sum = First_sum + b[i]*cos(n*phi) + c[i]*cos(n*psi);
   }

   double Second_sum = 0.0;
   for (int i = 0; i < 9; i++){
      int p = i + 1;
      for (int j = 0; j < (10-p); j++){
         Second_sum = Second_sum + d[i][j]*cos(double(p)*phi)*cos(double(j + 1)*psi);
      }
   }
   return a + First_sum + Second_sum;
}
//Primary bonding term
double d1HB_Barfield(double rho, double theta, double rOH)
{
   return (4.81 * pow(cos(theta), 2) + pow(sin(theta), 2)*(3.01*pow(cos(rho),2) - 0.84*cos(rho) + 1.75))*pow(e, -2*(rOH - 1.76));
}

double d1HB_Acetate(double rho, double theta, double rOH) {

//	#2.500 Angstom, PRIMARY
	double H_Lookup[9][10][24] = { { {    3.2233,      3.024,     2.6269,      2.213,     1.9057,     1.7261,     1.6689,     1.7228,     1.8683,     2.1049,     2.5677,     3.1087,     2.9865,     2.4811,     2.2064,     2.0494,     1.8762,     1.7363,     1.7113,     1.8213,     2.0486,     2.3823,     2.7783,     3.1166},
{    2.9099,     2.7775,     2.5093,     2.2041,      1.949,     1.7874,     1.7375,     1.7936,     1.9324,     2.1157,     2.3098,     2.4767,     2.4869,     2.3534,     2.2096,     2.0757,     1.9133,      1.792,     1.7604,     1.8635,     2.0629,     2.3405,      2.623,     2.8413},
{    2.7361,     2.6527,      2.452,     2.2102,     1.9929,     1.8487,     1.8121,     1.8639,     1.9879,       2.15,     2.2986,     2.4101,     2.4401,     2.3812,     2.2686,       2.13,     1.9811,     1.8615,     1.8201,     1.9046,      2.074,     2.3079,     2.5298,     2.6885},
{       2.6,     2.5444,     2.3884,     2.1962,     2.0211,     1.9027,      1.875,     1.9193,     2.0222,     2.1585,     2.2893,     2.3835,     2.4158,     2.3722,     2.2842,     2.1587,     2.0233,     1.9129,     1.8762,     1.9422,     2.0777,     2.2622,      2.441,     2.5638},
{    2.4701,     2.4261,     2.3189,     2.1708,     2.0342,      1.944,     1.9173,     1.9552,     2.0358,     2.1471,     2.2557,     2.3352,     2.3635,     2.3285,     2.2597,     2.1547,     2.0396,     1.9574,     1.9266,     1.9755,     2.0784,     2.2135,     2.3517,     2.4421},
{    2.3274,     2.2998,     2.2298,     2.1298,     2.0309,     1.9689,     1.9428,     1.9729,     2.0329,     2.1153,     2.1981,     2.2567,     2.2729,     2.2652,     2.2049,     2.1272,     2.0453,     1.9825,      1.965,     1.9945,     2.0666,     2.1577,     2.2531,     2.3146},
{    2.2022,     2.1845,     2.1397,     2.0799,       2.02,     1.9778,     1.9557,     1.9766,     2.0193,     2.0732,     2.1282,      2.165,     2.1796,     2.1865,     2.1364,     2.0921,     2.0354,     1.9958,     1.9873,     1.9965,     2.0432,     2.0979,     2.1611,     2.1973},
{    2.1001,      2.088,     2.0673,      2.035,     2.0056,      1.982,     1.9686,     1.9779,     2.0019,     2.0295,     2.0603,     2.0874,      2.096,     2.1072,     2.0791,     2.0558,      2.024,     2.0105,     2.0039,     2.0005,     2.0225,     2.0487,     2.0823,     2.0989},
{     2.039,     2.0248,     2.0138,     2.0014,     1.9907,      1.985,     1.9807,     1.9782,     1.9857,     1.9968,     2.0158,     2.0333,     2.0357,     2.0487,     2.0433,     2.0295,     2.0231,     2.0247,     2.0178,     2.0113,     2.0132,     2.0248,     2.0323,     2.0364},
{    2.0187,     2.0047,     1.9967,      1.983,     1.9781,     1.9832,     1.9851,     1.9775,     1.9782,     1.9856,     1.9966,     2.0045,     2.0137,      2.024,      2.027,     2.0224,     2.0261,     2.0282,     2.0226,     2.0213,     2.0173,     2.0247,     2.0201,     2.0212} },
{ {    3.5623,     3.3505,     2.9271,     2.4857,     2.1544,     1.9601,     1.9029,     1.9696,     2.1391,     2.4047,     2.9055,      3.496,     3.3621,     2.8086,     2.5183,     2.3535,      2.149,     1.9856,     1.9462,     2.0607,     2.3032,     2.6628,     3.0883,     3.4494},
{    3.2495,     3.1071,     2.8161,     2.4834,     2.2036,     2.0264,     1.9724,     2.0385,     2.2028,     2.4158,     2.6364,     2.8266,     2.8304,     2.6763,     2.5248,     2.3714,     2.1803,     2.0337,     1.9927,     2.1022,     2.3205,     2.6259,     2.9373,     3.1758},
{    3.0773,     2.9842,      2.765,     2.4985,      2.256,      2.094,      2.054,     2.1176,     2.2648,     2.4561,     2.6305,     2.7579,     2.7917,      2.719,      2.588,      2.427,     2.2528,     2.1086,     2.0583,     2.1494,     2.3376,     2.5975,     2.8464,      3.024},
{    2.9358,     2.8717,     2.6989,     2.4849,     2.2874,     2.1546,     2.1262,     2.1814,     2.3033,      2.465,      2.619,     2.7272,     2.7646,     2.7134,     2.6073,     2.4598,     2.2988,     2.1684,     2.1231,     2.1928,     2.3448,     2.5524,     2.7549,     2.8945},
{    2.7943,     2.7439,     2.6226,     2.4564,     2.3022,     2.2017,     2.1736,     2.2213,     2.3183,     2.4493,     2.5771,     2.6678,     2.7005,     2.6624,     2.5776,     2.4534,     2.3159,     2.2186,     2.1801,     2.2309,     2.3464,        2.5,     2.6576,     2.7619},
{     2.633,     2.6009,     2.5212,     2.4082,     2.2966,     2.2274,     2.2003,     2.2378,     2.3108,     2.4078,      2.504,     2.5714,      2.592,     2.5839,     2.5113,     2.4172,     2.3195,     2.2452,     2.2203,     2.2515,     2.3327,     2.4363,     2.5455,     2.6173},
{    2.4889,     2.4677,     2.4162,     2.3482,     2.2809,     2.2346,     2.2122,     2.2379,     2.2891,     2.3522,     2.4159,     2.4599,     2.4779,     2.4844,     2.4261,     2.3713,     2.3043,      2.257,     2.2433,     2.2532,      2.305,     2.3669,      2.439,     2.4822},
{    2.3695,     2.3545,     2.3305,      2.294,     2.2612,     2.2363,     2.2236,     2.2353,     2.2634,     2.2952,     2.3311,     2.3634,     2.3728,     2.3833,     2.3513,     2.3235,     2.2869,     2.2699,     2.2605,     2.2567,     2.2801,      2.309,     2.3467,     2.3668},
{    2.2963,     2.2801,     2.2678,     2.2539,     2.2423,      2.237,     2.2338,     2.2316,     2.2399,     2.2524,     2.2742,     2.2949,     2.2969,     2.3099,      2.303,     2.2881,     2.2812,     2.2823,     2.2743,     2.2668,     2.2679,       2.28,     2.2877,      2.293},
{    2.2736,     2.2573,     2.2481,     2.2332,     2.2281,     2.2343,     2.2369,     2.2282,     2.2285,     2.2364,     2.2489,     2.2577,     2.2677,     2.2783,     2.2813,     2.2768,     2.2818,     2.2844,     2.2782,     2.2767,     2.2718,     2.2792,     2.2741,      2.276} },
{ {    3.9619,     3.7378,     3.2922,      2.825,     2.4689,     2.2565,     2.1975,     2.2823,     2.4804,     2.7779,     3.3115,     3.9416,     3.8011,     3.2021,     2.9064,     2.7368,     2.5013,     2.3077,     2.2476,     2.3648,     2.6229,     3.0093,     3.4629,     3.8447},
{    3.6603,      3.507,     3.1922,     2.8289,     2.5202,     2.3232,     2.2656,     2.3447,      2.539,     2.7872,     3.0391,     3.2536,     3.2526,     3.0785,     2.9188,     2.7455,     2.5195,     2.3427,     2.2858,     2.4005,     2.6412,     2.9768,     3.3208,     3.5808},
{    3.4926,     3.3882,      3.147,     2.8518,     2.5805,      2.398,     2.3529,       2.43,     2.6058,     2.8321,     3.0383,     3.1837,     3.2232,     3.1371,     2.9866,     2.7984,     2.5901,     2.4163,     2.3552,      2.453,      2.662,     2.9524,     3.2322,     3.4326},
{    3.3454,     3.2719,     3.0792,     2.8397,     2.6162,     2.4657,     2.4349,     2.5035,     2.6489,     2.8416,     3.0236,     3.1494,     3.1937,     3.1352,      3.008,      2.832,     2.6392,     2.4845,       2.43,     2.5018,     2.6734,     2.9075,     3.1374,     3.2978},
{    3.1911,     3.1333,     2.9953,      2.808,     2.6323,     2.5194,     2.4896,     2.5486,     2.6658,     2.8211,     2.9724,     3.0774,     3.1154,     3.0742,       2.97,      2.821,     2.6579,     2.5422,     2.4939,     2.5456,     2.6763,      2.851,     3.0314,     3.1529},
{    3.0089,     2.9718,     2.8801,     2.7517,     2.6249,      2.547,     2.5186,     2.5649,      2.654,      2.769,     2.8811,     2.9604,     2.9865,     2.9754,     2.8887,     2.7752,     2.6586,     2.5712,     2.5369,     2.5682,     2.6605,     2.7789,     2.9045,      2.989},
{    2.8421,     2.8172,      2.758,     2.6802,     2.6039,     2.5526,     2.5301,     2.5617,     2.6236,      2.698,     2.7722,     2.8255,     2.8476,     2.8519,     2.7842,     2.7167,     2.6381,     2.5815,     2.5604,     2.5697,     2.6285,      2.699,     2.7814,     2.8326},
{    2.7021,     2.6841,     2.6564,     2.6151,     2.5783,     2.5517,       2.54,     2.5546,      2.588,     2.6251,     2.6672,     2.7057,     2.7158,     2.7251,     2.6896,     2.6562,     2.6135,     2.5922,     2.5781,     2.5732,     2.5992,     2.6317,     2.6735,     2.6971},
{    2.6146,     2.5961,     2.5828,     2.5673,     2.5545,     2.5497,     2.5478,     2.5461,     2.5555,     2.5698,     2.5947,     2.6188,     2.6203,     2.6332,     2.6256,     2.6095,     2.6018,     2.6017,     2.5915,     2.5829,     2.5836,     2.5963,     2.6046,     2.6103},
{     2.589,       2.57,     2.5599,     2.5438,     2.5383,     2.5456,      2.549,     2.5392,      2.539,     2.5478,     2.5617,     2.5711,     2.5821,      2.593,     2.5961,     2.5919,     2.5986,     2.6017,      2.595,     2.5932,     2.5875,     2.5948,     2.5894,     2.5917} },
{ {    4.4428,     4.2076,     3.7459,     3.2555,     2.8739,     2.6397,      2.578,     2.6853,     2.9189,      3.253,     3.8146,     4.4631,     4.3303,     3.7002,      3.404,     3.2291,     2.9595,     2.7261,     2.6385,     2.7563,     3.0312,     3.4452,     3.9258,     4.3247},
{    4.1652,     4.0005,     3.6598,     3.2626,     2.9211,     2.6992,     2.6381,     2.7344,     2.9646,     3.2552,     3.5438,     3.7811,      3.782,     3.5916,     3.4198,     3.2235,     2.9542,     2.7397,     2.6607,     2.7789,     3.0452,     3.4155,     3.7964,     4.0797},
{    4.0049,     3.8874,       3.62,     3.2905,     2.9855,     2.7798,     2.7282,     2.8214,     3.0317,     3.3001,     3.5453,     3.7134,     3.7604,      3.662,     3.4904,     3.2683,     3.0155,     2.8056,     2.7297,     2.8329,     3.0672,     3.3936,     3.7096,      3.937},
{    3.8525,     3.7677,     3.5508,     3.2806,     3.0263,     2.8555,     2.8199,     2.9045,     3.0795,     3.3097,     3.5264,     3.6752,     3.7285,     3.6624,     3.5099,     3.2983,     3.0661,     2.8808,     2.8141,     2.8878,     3.0826,     3.3481,     3.6108,     3.7965},
{     3.683,     3.6165,     3.4587,     3.2458,     3.0441,      2.916,      2.884,     2.9565,     3.0987,     3.2846,     3.4645,     3.5883,     3.6335,     3.5875,     3.4607,     3.2809,     3.0864,      2.947,      2.886,     2.9385,     3.0878,     3.2873,     3.4948,     3.6375},
{    3.4773,     3.4342,     3.3276,     3.1804,     3.0349,     2.9464,     2.9171,     2.9739,      3.083,     3.2203,     3.3522,     3.4471,     3.4807,     3.4639,     3.3604,     3.2238,     3.0844,     2.9797,     2.9339,      2.964,     3.0699,     3.2061,     3.3516,     3.4517},
{    3.2832,     3.2544,      3.186,     3.0966,     3.0095,     2.9518,     2.9293,     2.9681,     3.0435,      3.132,     3.2192,     3.2848,     3.3125,     3.3113,     3.2335,     3.1505,     3.0574,     2.9899,     2.9591,      2.966,     3.0332,     3.1148,     3.2093,     3.2701},
{    3.1186,     3.0978,     3.0661,     3.0193,     2.9778,     2.9491,     2.9383,     2.9567,     2.9967,     3.0406,     3.0903,     3.1366,     3.1478,     3.1548,      3.116,     3.0756,     3.0251,     2.9981,     2.9779,     2.9699,     2.9996,     3.0369,     3.0837,     3.1111},
{    3.0145,      2.994,     2.9796,     2.9628,     2.9485,     2.9441,     2.9435,     2.9427,     2.9537,     2.9704,      2.999,     3.0265,     3.0275,     3.0404,     3.0325,     3.0149,     3.0056,     3.0042,     2.9908,     2.9801,     2.9808,     2.9945,     3.0035,     3.0093},
{    2.9856,     2.9642,     2.9535,     2.9363,     2.9301,     2.9384,     2.9425,     2.9316,     2.9312,      2.941,     2.9564,     2.9657,     2.9777,     2.9891,     2.9926,     2.9894,      2.998,     3.0015,      2.994,     2.9918,     2.9852,     2.9924,     2.9865,      2.989} },
{ {    5.0383,      4.794,     4.3227,      3.813,      3.404,     3.1436,     3.0791,     3.2141,     3.4939,     3.8712,     4.4539,      5.095,     4.9952,     4.3596,       4.06,     3.8733,     3.5609,     3.2718,     3.1499,     3.2663,     3.5616,     4.0055,     4.5117,     4.9228},
{    4.7972,       4.62,     4.2502,     3.8156,     3.4367,     3.1856,     3.1198,     3.2392,     3.5135,     3.8562,     4.1862,     4.4458,      4.458,      4.257,      4.066,     3.8378,     3.5143,      3.252,     3.1457,     3.2671,     3.5618,      3.974,     4.3965,      4.706},
{    4.6474,     4.5148,     4.2155,     3.8452,     3.4998,     3.2674,     3.2088,     3.3218,     3.5739,     3.8932,     4.1858,     4.3845,     4.4409,     4.3306,     4.1338,     3.8681,     3.5597,     3.3053,     3.2092,     3.3167,     3.5819,      3.951,     4.3105,       4.57},
{    4.4903,     4.3915,     4.1445,     3.8369,      3.546,     3.3522,     3.3098,     3.4132,     3.6253,      3.901,     4.1618,     4.3405,     4.4054,      4.329,     4.1463,     3.8902,     3.6096,     3.3857,     3.3011,     3.3786,     3.6003,     3.9042,     4.2067,     4.4233},
{    4.3017,     4.2249,     4.0428,     3.7991,     3.5663,     3.4203,      3.385,     3.4737,     3.6467,     3.8711,     4.0865,      4.235,     4.2901,     4.2365,     4.0829,     3.8648,     3.6316,     3.4608,     3.3836,     3.4373,     3.6091,     3.8388,     4.0786,     4.2472},
{    4.0695,     4.0192,     3.8939,      3.724,     3.5559,     3.4552,     3.4252,     3.4946,     3.6278,     3.7933,     3.9504,     4.0655,     4.1091,     4.0835,       3.96,     3.7954,     3.6268,     3.4992,     3.4394,     3.4684,       3.59,     3.7479,     3.9174,     4.0368},
{    3.8436,     3.8109,     3.7315,     3.6278,     3.5277,     3.4623,     3.4404,     3.4883,       3.58,     3.6864,     3.7896,     3.8711,     3.9061,     3.8962,     3.8077,     3.7056,     3.5936,     3.5119,     3.4702,      3.473,     3.5494,     3.6446,     3.7536,     3.8261},
{    3.6502,     3.6271,      3.591,      3.538,     3.4908,     3.4594,     3.4501,     3.4735,     3.5218,     3.5743,     3.6336,     3.6889,      3.702,     3.7061,     3.6637,     3.6136,     3.5535,     3.5191,      3.492,      3.479,     3.5123,     3.5556,     3.6087,     3.6399},
{    3.5273,     3.5051,     3.4904,     3.4722,     3.4565,     3.4523,     3.4533,     3.4537,      3.467,     3.4867,     3.5197,     3.5505,     3.5514,     3.5644,     3.5564,     3.5369,     3.5254,      3.522,      3.505,     3.4909,     3.4912,     3.5059,     3.5161,     3.5213},
{    3.4951,     3.4718,     3.4609,      3.443,     3.4357,     3.4448,     3.4499,      3.438,     3.4375,     3.4483,      3.465,     3.4737,     3.4866,      3.499,     3.5032,     3.5012,      3.512,     3.5164,     3.5079,     3.5047,     3.4969,     3.5042,     3.4975,     3.4993} },
{ {     5.798,     5.5468,     5.0707,     4.5447,      4.104,     3.8135,      3.746,     3.9166,     4.2578,     4.6875,      5.282,     5.8971,     5.8548,     5.2436,     4.9336,     4.7273,     4.3575,      3.991,     3.8254,     3.9389,     4.2592,     4.7375,     5.2689,     5.6882},
{    5.6042,     5.4123,     5.0095,     4.5306,     4.1072,     3.8217,     3.7512,     3.9018,     4.2321,     4.6386,      5.016,     5.3029,     5.3346,     5.1268,     4.9072,      4.635,     4.2438,       3.92,     3.7795,     3.9053,     4.2326,     4.6959,     5.1667,     5.5072},
{    5.4677,     5.3169,     4.9785,     4.5582,     4.1638,     3.8986,     3.8347,     3.9733,     4.2765,     4.6577,     5.0083,     5.2488,     5.3178,      5.194,     4.9642,     4.6421,     4.2651,     3.9546,     3.8315,      3.944,     4.2455,     4.6659,     5.0795,     5.3785},
{    5.3046,     5.1889,     4.9052,     4.5505,     4.2147,      3.994,     3.9444,     4.0713,     4.3292,     4.6609,     4.9781,     5.1958,     5.2757,     5.1843,     4.9647,     4.6523,     4.3114,     4.0383,     3.9293,     4.0129,     4.2667,     4.6171,     4.9693,     5.2236},
{    5.0932,      5.004,     4.7915,     4.5097,     4.2396,     4.0726,     4.0333,     4.1417,     4.3531,     4.6258,     4.8863,     5.0668,     5.1357,     5.0707,     4.8835,     4.6177,     4.3349,     4.1229,     4.0256,     4.0822,     4.2805,     4.5473,     4.8267,      5.027},
{      4.83,     4.7708,     4.6226,      4.425,     4.2298,     4.1145,     4.0847,     4.1694,     4.3321,     4.5334,     4.7234,     4.8641,     4.9205,     4.8831,     4.7341,     4.5343,      4.328,     4.1704,     4.0932,     4.1225,      4.262,     4.4463,     4.6451,     4.7883},
{    4.5676,     4.5302,     4.4373,     4.3165,     4.2008,     4.1269,     4.1068,     4.1656,     4.2774,     4.4065,     4.5304,     4.6316,     4.6749,     4.6541,     4.5524,     4.4262,     4.2902,     4.1891,     4.1349,     4.1341,     4.2194,     4.3308,     4.4577,     4.5444},
{    4.3404,     4.3156,     4.2744,     4.2144,     4.1609,     4.1264,     4.1195,     4.1493,     4.2081,     4.2717,     4.3428,     4.4085,     4.4244,     4.4245,     4.3774,     4.3151,     4.2425,     4.1986,     4.1639,     4.1455,     4.1808,     4.2309,     4.2916,     4.3275},
{    4.1963,     4.1733,     4.1585,     4.1395,     4.1225,     4.1184,     4.1216,     4.1241,     4.1406,     4.1637,     4.2015,      4.235,     4.2366,     4.2504,     4.2421,     4.2196,     4.2055,     4.1997,     4.1787,     4.1606,     4.1591,     4.1743,     4.1857,     4.1897},
{     4.161,     4.1368,     4.1264,     4.1084,     4.1001,     4.1097,     4.1158,     4.1031,     4.1029,      4.114,     4.1318,     4.1385,     4.1527,      4.167,     4.1719,      4.172,     4.1854,     4.1912,     4.1819,      4.177,     4.1674,     4.1744,     4.1664,     4.1664} },
{ {    6.7855,      6.529,     6.0497,     5.5076,     5.0267,     4.7008,     4.6309,     4.8486,     5.2685,     5.7636,     6.3663,     6.9453,     6.9779,     6.4099,     6.0842,     5.8523,     5.4055,       4.94,     4.7175,     4.8259,     5.1762,     5.6968,     6.2572,     6.6834},
{    6.6482,     6.4388,     5.9959,     5.4619,     4.9818,     4.6543,     4.5804,     4.7731,     5.1756,     5.6587,     6.0953,     6.4198,     6.4781,     6.2611,     6.0055,     5.6747,     5.1986,     4.7951,     4.6103,     4.7401,     5.1079,      5.634,     6.1647,     6.5443},
{     6.527,     6.3536,     5.9654,     5.4811,     5.0253,     4.7189,     4.6526,     4.8253,     5.1932,     5.6508,      6.074,     6.3698,     6.4587,     6.3156,     6.0414,     5.6472,     5.1842,     4.8017,     4.6435,     4.7617,     5.1064,     5.5915,     6.0738,      6.423},
{    6.3547,     6.2189,     5.8879,     5.4728,     5.0799,     4.8259,     4.7708,     4.9284,     5.2441,     5.6466,      6.036,     6.3046,     6.4048,     6.2923,     6.0254,     5.6406,     5.2231,     4.8871,      4.747,     4.8373,     5.1307,     5.5393,     5.9546,     6.2558},
{    6.1168,     6.0117,     5.7605,     5.4301,     5.1139,     4.9208,     4.8776,     5.0115,     5.2719,     5.6062,     5.9246,     6.1476,     6.2348,      6.154,     5.9219,     5.5962,      5.249,     4.9835,     4.8614,     4.9225,     5.1521,     5.4656,     5.7951,      6.035},
{    5.8159,     5.7458,     5.5693,     5.3374,     5.1091,     4.9758,     4.9468,     5.0511,     5.2506,     5.4989,     5.7322,     5.9058,      5.978,     5.9254,     5.7431,      5.498,     5.2428,      5.046,     4.9472,     4.9778,      5.138,     5.3553,     5.5901,      5.763},
{    5.5107,     5.4677,     5.3582,     5.2169,     5.0824,      4.999,      4.982,      5.055,     5.1914,       5.35,     5.5018,     5.6273,       5.68,      5.647,     5.5265,     5.3699,     5.2026,     5.0756,     5.0064,     5.0035,     5.0977,     5.2275,     5.3765,     5.4808},
{    5.2439,     5.2178,     5.1711,     5.1031,     5.0426,      5.005,     5.0018,       5.04,     5.1121,     5.1899,     5.2757,     5.3539,     5.3739,     5.3687,     5.3154,     5.2374,     5.1488,     5.0912,     5.0482,     5.0252,     5.0607,     5.1172,     5.1873,     5.2286},
{    5.0755,     5.0529,     5.0389,     5.0199,      5.002,     4.9986,     5.0046,       5.01,     5.0307,     5.0579,     5.1008,     5.1361,       5.14,      5.155,     5.1462,     5.1195,     5.1021,     5.0928,     5.0681,     5.0455,     5.0404,     5.0552,     5.0671,     5.0689},
{     5.038,     5.0142,     5.0051,     4.9884,     4.9792,     4.9893,     4.9962,     4.9832,     4.9829,     4.9938,     5.0114,     5.0149,     5.0306,     5.0487,     5.0551,      5.058,     5.0746,     5.0819,     5.0723,     5.0657,      5.053,     5.0587,     5.0492,     5.0453} },
{ {    8.0693,     7.8069,     7.3216,     6.7597,     6.2269,     5.8569,     5.7853,     6.0643,     6.5802,     7.1571,     7.7786,     8.3191,     8.4304,     7.9099,     7.5677,     7.3053,     6.7596,     6.1738,     5.8769,     5.9781,     6.3642,     6.9393,     7.5392,      7.976},
{     7.996,     7.7645,     7.2702,     6.6658,     6.1109,     5.7306,     5.6534,     5.9031,     6.3985,      6.974,      7.488,      7.863,     7.9557,      7.724,     7.4253,      7.019,      6.436,     5.9278,     5.6844,     5.8155,     6.2351,     6.8415,     7.4501,     7.8815},
{    7.8894,     7.6872,     7.2338,     6.6671,     6.1321,     5.7723,     5.7049,     5.9251,     6.3779,     6.9312,     7.4471,     7.8127,     7.9309,     7.7631,     7.4286,     6.9433,     6.3705,     5.8942,     5.6889,      5.813,      6.211,     6.7803,     7.3516,     7.7662},
{     7.702,     7.5408,     7.1481,     6.6553,     6.1884,     5.8902,     5.8343,     6.0324,     6.4228,     6.9167,     7.3976,     7.7328,      7.859,     7.7203,     7.3914,     6.9137,     6.3966,     5.9789,     5.7991,     5.8955,     6.2385,     6.7215,     7.2182,       7.58},
{    7.4314,     7.3063,     7.0053,      6.612,      6.237,     6.0102,     5.9655,     6.1341,     6.4575,     6.8706,     7.2642,     7.5433,     7.6539,     7.5528,      7.261,     6.8585,     6.4272,     6.0925,      5.938,     6.0046,     6.2726,     6.6452,     7.0392,     7.3293},
{    7.0852,     7.0019,     6.7903,     6.5154,     6.2462,     6.0896,     6.0631,     6.1939,     6.4406,     6.7498,     7.0399,     7.2567,     7.3478,     7.2762,     7.0505,     6.7463,     6.4274,     6.1792,     6.0533,     6.0856,     6.2701,     6.5283,     6.8081,     7.0178},
{    6.7313,     6.6817,     6.5529,     6.3866,     6.2296,     6.1343,     6.1223,     6.2141,     6.3819,     6.5789,     6.7678,     6.9234,     6.9872,     6.9412,     6.7945,     6.5987,     6.3902,     6.2292,     6.1398,     6.1357,     6.2403,     6.3911,     6.5669,     6.6932},
{    6.4201,     6.3932,     6.3405,     6.2639,     6.1959,     6.1555,     6.1572,      6.207,     6.2961,     6.3923,     6.4968,       6.59,     6.6156,     6.6038,     6.5416,     6.4433,     6.3337,     6.2576,     6.2036,     6.1765,     6.2116,     6.2733,     6.3545,     6.4022},
{    6.2255,      6.205,     6.1927,      6.175,     6.1575,     6.1556,     6.1653,     6.1749,     6.2012,     6.2336,     6.2812,     6.3172,     6.3251,     6.3417,     6.3318,     6.3005,     6.2787,     6.2634,     6.2345,     6.2079,     6.1973,     6.2094,     6.2208,     6.2195},
{    6.1882,     6.1664,     6.1602,      6.146,     6.1366,     6.1473,      6.155,     6.1419,     6.1415,     6.1511,     6.1665,     6.1647,     6.1822,      6.206,     6.2154,     6.2222,     6.2426,     6.2511,      6.242,     6.2339,     6.2166,     6.2195,     6.2084,     6.1982} },
{ {    9.7158,     9.4402,      8.942,      8.353,     7.7555,     7.3283,      7.255,     7.6101,     8.2386,     8.9179,      9.582,    10.0919,    10.2653,     9.7937,     9.4326,     9.1359,     8.4723,     7.7417,     7.3473,     7.4365,     7.8676,     8.5149,     9.1728,     9.6304},
{    9.7095,     9.4476,     8.8851,     8.1911,     7.5384,     7.0905,     7.0092,     7.3338,     7.9467,     8.6355,     9.2508,     9.6911,     9.8245,     9.5762,     9.2214,     8.7239,     8.0059,     7.3587,     7.0381,     7.1668,     7.6515,     8.3625,      9.075,     9.5777},
{     9.615,     9.3749,     8.8358,      8.163,     7.5239,     7.0954,     7.0249,     7.3117,     7.8771,     8.5518,     9.1861,     9.6384,     9.7943,      9.599,     9.1858,     8.5868,     7.8718,      7.271,     7.0001,     7.1298,     7.5968,     8.2756,     8.9636,     9.4649},
{    9.4062,     9.2119,      8.738,     8.1454,     7.5835,     7.2244,     7.1702,     7.4236,     7.9134,     8.5257,      9.123,     9.5448,     9.7018,     9.5331,     9.1234,     8.5274,     7.8797,     7.3543,     7.1207,      7.223,     7.6282,     8.2081,     8.8112,     9.2539},
{    9.0948,     8.9454,     8.5799,     8.1055,     7.6548,     7.3832,     7.3402,     7.5561,     7.9615,     8.4769,     8.9688,     9.3205,     9.4599,     9.3329,     8.9636,     8.4618,     7.9208,     7.4956,      7.297,     7.3682,     7.6841,     8.1325,     8.6108,     8.9659},
{     8.697,      8.598,     8.3426,     8.0128,     7.6927,     7.5058,     7.4841,     7.6514,     7.9599,     8.3476,      8.712,     8.9855,     9.0991,     9.0038,     8.7213,     8.3397,     7.9376,     7.6215,       7.46,      7.493,     7.7071,     8.0159,     8.3534,     8.6103},
{    8.2891,     8.2329,     8.0813,      7.885,     7.7005,     7.5903,     7.5858,     7.7035,     7.9122,     8.1594,     8.3966,     8.5897,     8.6673,     8.6062,     8.4236,     8.1771,     7.9145,      7.708,      7.592,      7.585,     7.7027,      7.878,     8.0864,     8.2401},
{    7.9324,     7.9056,     7.8465,     7.7604,     7.6845,     7.6417,     7.6504,     7.7158,     7.8271,     7.9472,     8.0759,     8.1873,     8.2199,     8.2005,     8.1245,     8.0004,     7.8633,     7.7623,     7.6917,     7.6601,     7.6952,     7.7611,      7.854,     7.9106},
{    7.7124,     7.6964,     7.6873,     7.6722,     7.6567,     7.6578,     7.6723,     7.6883,     7.7219,     7.7606,     7.8126,     7.8485,     7.8616,     7.8791,     7.8686,     7.8327,     7.8041,     7.7793,     7.7439,     7.7134,     7.6962,     7.7023,     7.7119,     7.7068},
{    7.6805,     7.6625,     7.6612,      7.651,     7.6422,     7.6536,     7.6622,     7.6493,     7.6488,     7.6557,      7.666,     7.6571,     7.6765,     7.7066,     7.7215,     7.7343,     7.7587,     7.7676,     7.7602,     7.7515,      7.728,     7.7252,     7.7113,     7.6937} } };

 

// Convert to degrees corresponding to the lookup table geometries
// Table geometries are (in the correct order:)
// dist(H..O), rOH = 2.5 to 1.5 Å; angle(H..O-C), theta = 90 to 180 deg; dihedral(H..O-C to HO), rho = -180 to 165 deg
	theta = theta/M_PI * 180.0;
	rho =  rho/M_PI * 180.0;

//Fail-safe geometries, in case the geometry in question is out of range. This is the nearest point in range
	if (rOH > 2.5) rOH = 2.5;
	if (rOH < 1.5) rOH = 1.5;

	if (theta < 90.0) theta = 90.0;

	if (rho == 180.0) rho = -180.0;

// FIND the point in cubie cordinates, i.e. move the zero point and normalize by the table spacing
	double D = (2.5 - rOH)/0.125;

	double T = (theta - 90.0)/10.0;

	double R = (rho + 180.0)/15.0;

// FIND the corner numbers of the containing cubie
	int Rdown = (int)floor(R);
	int Rup = (int)ceil(R);
	double Rd = R - floor(R);
	if (Rup == 24) Rup = 0;

	int Tdown = (int)floor(T);
	int Tup = (int)ceil(T);
	double Td = T - floor(T);	

	int Ddown = (int)floor(D);
	int Dup = (int)ceil(D);
	double Dd = D - floor(D);

// LOAD corners of the interpolation cubie
	double PA12 = H_Lookup[Ddown][Rdown][Tup];
	double PA22 = H_Lookup[Ddown][Rup][Tup];
	double PA11 = H_Lookup[Ddown][Rdown][Tdown];
	double PA21 = H_Lookup[Ddown][Rup][Tdown];

	double PB12 = H_Lookup[Dup][Rdown][Tup];
	double PB22 = H_Lookup[Dup][Rup][Tup];
	double PB11 = H_Lookup[Dup][Rdown][Tdown];
	double PB21 = H_Lookup[Dup][Rup][Tdown];
		
// INTERPOLATE over angle rho
	double QA2 = (PA22 - PA12)*Rd + PA12;
	double QA1 = (PA21 - PA11)*Rd + PA11;
	
	double QB2 = (PB22 - PB12)*Rd + PB12;
	double QB1 = (PB21 - PB11)*Rd + PB11;
	
// INTERPOLATE over angle theta
	double RA1 = (QA2 - QA1)*Td + QA1;
	double RB1 = (QB2 - QB1)*Td + QB1;
// INTERPOLATE over  distance rOH
	double N = (RB1 - RA1)*Dd + RA1;

	return N;
}

double d1HB_Methanol(double rho, double theta, double rOH) {

//	#2.500 Angstom, PRIMARY
	double H_Lookup[9][10][10] = { 
{ 
{    0.4339,     0.4449,     0.4569,     0.4641,     0.4687,     0.4734,      0.474,     0.4695,     0.4652,     0.4592},
{    0.5979,     0.6017,     0.5986,     0.5869,     0.5664,     0.5348,     0.4926,      0.445,      0.397,     0.3507},
{    0.7324,     0.7333,     0.7257,     0.7079,     0.6755,     0.6194,     0.5451,     0.4574,     0.3606,     0.2668},
{    0.8268,      0.829,     0.8263,     0.8144,     0.7817,     0.7188,      0.621,     0.4977,     0.3534,     0.2133},
{     0.881,     0.8869,     0.8938,     0.8987,     0.8781,     0.8177,     0.7063,     0.5508,     0.3687,     0.1898},
{    0.8943,     0.9002,     0.9226,     0.9461,      0.946,     0.8989,     0.7845,     0.6087,     0.3961,     0.1848},
{    0.8584,     0.8705,     0.9136,     0.9609,     0.9797,     0.9454,     0.8296,     0.6382,      0.411,     0.1812},
{    0.7751,     0.8007,     0.8635,     0.9336,     0.9721,     0.9482,      0.834,     0.6338,     0.4097,     0.1717},
{    0.6671,     0.7029,     0.7839,     0.8712,     0.9269,     0.9104,     0.8002,     0.6025,     0.3839,     0.1442},
{    0.5709,      0.607,     0.6935,       0.79,     0.8536,     0.8473,     0.7412,     0.5507,     0.3382,     0.1046} },

{ 
{    0.5459,     0.5585,     0.5723,       0.58,     0.5842,     0.5883,     0.5887,     0.5847,      0.581,     0.5748},
{    0.7372,     0.7415,     0.7384,     0.7244,     0.6998,     0.6619,     0.6119,     0.5571,     0.5029,     0.4509},
{     0.895,     0.8961,     0.8882,     0.8682,     0.8303,     0.7645,     0.6776,     0.5758,     0.4662,     0.3605},
{    1.0051,     1.0085,     1.0071,     0.9949,     0.9583,     0.8853,     0.7719,     0.6301,     0.4668,     0.3086},
{     1.067,     1.0758,     1.0868,     1.0958,     1.0752,     1.0065,     0.8784,     0.7006,     0.4954,     0.2937},
{    1.0791,     1.0888,     1.1199,     1.1529,     1.1584,     1.1072,     0.9768,     0.7766,     0.5389,     0.3025},
{    1.0331,       1.05,     1.1075,     1.1696,     1.1993,     1.1668,     1.0356,     0.8186,     0.5668,     0.3124},
{    0.9295,      0.963,     1.0449,     1.1355,     1.1905,     1.1721,     1.0418,      0.816,     0.5719,     0.3116},
{    0.7963,     0.8437,      0.947,     1.0581,     1.1343,     1.1282,     1.0032,     0.7791,     0.5438,     0.2843},
{    0.6793,     0.7266,     0.8369,     0.9596,     1.0466,     1.0522,     0.9334,       0.72,     0.4908,     0.2361} },

{ 
{     0.701,     0.7156,     0.7316,       0.74,      0.744,     0.7475,     0.7477,     0.7443,     0.7408,     0.7343},
{    0.9248,       0.93,     0.9267,     0.9101,     0.8806,     0.8357,     0.7769,     0.7138,     0.6524,     0.5936},
{     1.111,     1.1123,     1.1043,     1.0815,     1.0369,     0.9603,     0.8589,     0.7417,     0.6176,     0.4982},
{     1.241,     1.2453,     1.2455,     1.2331,     1.1914,     1.1071,     0.9763,     0.8141,     0.6301,     0.4517},
{    1.3128,     1.3248,     1.3406,     1.3543,     1.3334,     1.2551,     1.1087,     0.9076,     0.6771,     0.4505},
{    1.3238,     1.3386,     1.3798,     1.4239,      1.436,     1.3795,     1.2318,     1.0069,     0.7422,     0.4793},
{    1.2654,     1.2891,     1.3637,     1.4432,     1.4863,     1.4553,     1.3079,     1.0652,      0.788,     0.5092},
{    1.1362,     1.1802,     1.2851,     1.4001,     1.4772,     1.4649,     1.3173,     1.0664,     0.8023,      0.522},
{    0.9717,     1.0338,     1.1645,     1.3053,     1.4081,      1.414,      1.273,     1.0236,      0.773,     0.4971},
{    0.8282,       0.89,     1.0311,     1.1868,     1.3026,     1.3239,     1.1925,     0.9575,      0.712,     0.4396} },

{ 
{    0.9199,     0.9368,     0.9555,     0.9647,     0.9692,     0.9722,     0.9724,     0.9692,     0.9656,     0.9584},
{    1.1811,     1.1876,     1.1842,     1.1646,       1.13,     1.0777,      1.009,     0.9363,     0.8666,     0.7999},
{     1.401,      1.403,     1.3947,     1.3686,     1.3166,     1.2283,     1.1112,     0.9764,     0.8365,     0.7016},
{    1.5558,     1.5611,     1.5633,     1.5505,     1.5028,     1.4062,     1.2566,     1.0721,     0.8656,     0.6651},
{    1.6408,     1.6559,     1.6774,     1.6969,     1.6752,     1.5869,      1.421,     1.1948,     0.9377,     0.6851},
{    1.6509,     1.6713,     1.7241,     1.7819,     1.8018,       1.74,     1.5741,     1.3236,     1.0321,      0.744},
{    1.5778,     1.6092,     1.7029,      1.804,     1.8655,     1.8361,     1.6725,     1.4044,     1.1029,     0.8037},
{    1.4168,     1.4731,     1.6051,     1.7506,     1.8579,     1.8524,     1.6879,     1.4132,     1.1309,      0.837},
{    1.2139,      1.293,     1.4578,      1.636,     1.7747,     1.7933,     1.6375,     1.3659,      1.102,     0.8168},
{    1.0372,     1.1174,     1.2958,     1.4936,     1.6479,     1.6885,     1.5481,      1.293,     1.0323,      0.749} },

{ 
{    1.2364,     1.2561,     1.2776,     1.2879,     1.2927,     1.2956,     1.2957,     1.2928,      1.289,      1.281},
{    1.5407,     1.5492,     1.5457,     1.5225,     1.4821,     1.4214,     1.3415,     1.2578,     1.1787,     1.1031},
{       1.8,     1.8036,     1.7953,     1.7651,     1.7047,     1.6033,     1.4685,      1.314,     1.1564,     1.0046},
{    1.9845,     1.9913,     1.9967,     1.9835,     1.9288,     1.8187,     1.6483,      1.439,     1.2086,     0.9848},
{    2.0862,     2.1052,     2.1342,     2.1608,      2.138,      2.039,     1.8522,      1.599,     1.3144,     1.0371},
{    2.0959,     2.1234,     2.1899,      2.265,     2.2935,      2.227,     2.0426,     1.7656,     1.4486,     1.1394},
{    2.0051,      2.046,      2.162,     2.2909,     2.3749,     2.3482,      2.169,     1.8767,     1.5541,     1.2423},
{     1.806,     1.8776,     2.0418,     2.2269,     2.3698,      2.373,     2.1951,     1.8983,     1.6018,     1.3054},
{    1.5553,     1.6554,     1.8625,     2.0886,     2.2731,      2.307,     2.1405,     1.8498,     1.5755,     1.2937},
{    1.3377,     1.4398,     1.6642,     1.9171,     2.1232,     2.1873,     2.0434,     1.7696,     1.4969,     1.2142} },

{ 
{    1.6979,     1.7205,     1.7449,     1.7561,     1.7606,     1.7629,     1.7629,     1.7605,     1.7571,     1.7486},
{    2.0519,     2.0628,     2.0586,     2.0314,     1.9837,     1.9129,     1.8204,     1.7243,     1.6349,     1.5496},
{     2.358,     2.3645,     2.3559,     2.3202,     2.2497,      2.133,      1.978,     1.8016,     1.6248,     1.4546},
{    2.5783,     2.5883,     2.5977,     2.5829,     2.5205,     2.3947,     2.2005,     1.9645,     1.7084,     1.4611},
{    2.7007,     2.7255,     2.7643,     2.7989,     2.7746,     2.6642,     2.4534,     2.1714,     1.8599,      1.561},
{    2.7103,     2.7471,     2.8314,     2.9277,     2.9655,     2.8954,     2.6899,     2.3865,     2.0476,      1.725},
{    2.5972,     2.6508,     2.7944,     2.9593,     3.0681,     3.0477,     2.8514,     2.5368,     2.1986,     1.8886},
{    2.3523,     2.4437,     2.6478,     2.8833,     3.0644,     3.0813,     2.8918,     2.5771,     2.2731,     1.9938},
{    2.0425,     2.1688,      2.428,     2.7176,     2.9563,     3.0125,     2.8391,     2.5322,     2.2521,     1.9952},
{    1.7732,      1.902,     2.1847,     2.5096,     2.7831,     2.8778,     2.7339,     2.4441,     2.1645,     1.9019} },

{ 
{    2.3642,     2.3901,     2.4165,     2.4286,     2.4322,      2.434,      2.434,     2.4318,     2.4295,     2.4204},
{    2.7778,     2.7909,      2.785,     2.7523,     2.6948,     2.6121,     2.5058,      2.396,     2.2951,     2.1982},
{    3.1407,     3.1506,     3.1405,     3.0976,     3.0143,     2.8785,     2.7015,     2.5012,     2.3027,     2.1123},
{    3.4052,       3.42,     3.4333,     3.4154,      3.343,     3.1976,     2.9771,     2.7123,      2.429,     2.1584},
{    3.5531,     3.5856,     3.6369,     3.6795,     3.6534,     3.5286,     3.2904,     2.9782,     2.6409,     2.3267},
{    3.5609,     3.6102,      3.718,     3.8392,     3.8879,     3.8135,      3.584,     3.2545,     2.8976,      2.577},
{    3.4176,     3.4886,     3.6692,     3.8794,     4.0161,     4.0047,     3.7883,      3.453,     3.1063,     2.8233},
{    3.1167,     3.2334,      3.489,     3.7889,     4.0122,     4.0486,     3.8451,     3.5167,      3.215,     2.9861},
{    2.7345,      2.893,     3.2178,      3.592,     3.8945,     3.9827,      3.802,       3.48,     3.2024,     3.0065},
{    2.4007,     2.5626,     2.9211,     3.3417,     3.6978,     3.8343,     3.6902,     3.3858,     3.1055,     2.8978} },

{ 
{    3.3068,      3.337,      3.364,      3.377,     3.3798,     3.3813,     3.3815,     3.3793,     3.3777,     3.3682},
{    3.7932,     3.8085,      3.799,     3.7586,     3.6883,     3.5924,     3.4712,     3.3461,     3.2311,      3.121},
{    4.2281,     4.2405,     4.2267,     4.1741,     4.0731,     3.9149,     3.7139,     3.4874,     3.2641,     3.0514},
{     4.548,     4.5681,     4.5847,     4.5614,     4.4747,     4.3043,      4.055,      3.759,     3.4463,     3.1556},
{    4.7256,     4.7682,     4.8348,      4.885,     4.8551,     4.7097,     4.4412,     4.0963,     3.7359,     3.4199},
{     4.728,     4.7937,     4.9329,     5.0822,     5.1434,     5.0599,     4.8036,     4.4461,     4.0789,     3.7872},
{    4.5424,     4.6372,     4.8685,     5.1333,     5.3018,     5.2978,      5.058,     4.7011,     4.3591,     4.1443},
{    4.1704,     4.3196,     4.6446,     5.0255,     5.3003,     5.3583,     5.1349,     4.7915,      4.509,     4.3841},
{    3.7014,     3.8999,     4.3103,      4.793,      5.174,     5.3001,     5.1032,     4.7642,     4.5071,      4.432},
{    3.2892,     3.4926,     3.9507,     4.4977,     4.9532,     5.1412,     4.9909,     4.6677,     4.4006,     4.3054} },

{ 
{    4.6125,     4.6471,     4.6738,     4.6876,     4.6901,     4.6913,     4.6915,     4.6894,     4.6882,     4.6781},
{    5.1876,      5.205,     5.1896,     5.1388,     5.0523,     4.9413,     4.8036,     4.6612,       4.53,     4.4048},
{    5.7154,     5.7292,     5.7093,     5.6427,     5.5174,     5.3326,     5.1036,     4.8478,     4.5969,     4.3623},
{    6.1057,     6.1308,     6.1498,     6.1175,     6.0091,     5.8068,     5.5228,     5.1916,     4.8504,     4.5484},
{    6.3182,     6.3731,     6.4581,     6.5148,     6.4749,        6.3,     5.9943,     5.6122,     5.2372,     4.9433},
{    6.3088,     6.3964,     6.5757,     6.7572,     6.8294,     6.7273,     6.4353,      6.044,     5.6848,     5.4658},
{    6.0652,     6.1922,     6.4902,      6.819,     7.0236,     7.0175,     6.7458,     6.3628,     6.0514,     5.9676},
{    5.6007,     5.7912,     6.2083,     6.6898,      7.029,      7.103,       6.85,     6.4823,     6.2481,     6.3043},
{    5.0252,     5.2737,      5.797,     6.4131,     6.8909,     7.0517,      6.823,       6.46,     6.2563,     6.3863},
{    4.5177,     4.7742,       5.36,     6.0671,     6.6435,     6.8835,     6.7156,      6.362,     6.1359,      6.232} } };


// Convert to degrees corresponding to the lookup table geometries
// Table geometries are (in the correct order:)
// dist(H..O), rOH = 2.5 to 1.5 Å; angle(H..O-C), theta = 180 to 90 deg; dihedral(H..O-C to HO), rho = 180 to 45 deg (symmetrical/equivivalent to -180 to -45)
	theta = theta/M_PI * 180.0;
        rho =  std::fabs(rho/M_PI * 180.0);

//	std::cout << rOH << "  " << theta << "  " << rho << std::endl;

//Fail-safe geometries, in case the geometry in question is out of range. This is the nearest point in range
	if (rOH > 2.5) rOH = 2.5;
	if (rOH < 1.5) rOH = 1.5;

	if (theta < 90.0) theta = 90.0;

	if (rho < 45.0) rho = 45.0;

// FIND the point in cubie cordinates, i.e. move the zero point and normalize by the table spacing
	double D = (2.5 - rOH)/0.125;

	double T = (180.0 - theta)/10.0;

	double R = (180.0 - rho)/15.0;


// FIND the corner numbers of the containing cubie
	int Rdown = (int)floor(R);
	int Rup = (int)ceil(R);
	double Rd = R - floor(R);

	int Tdown = (int)floor(T);
	int Tup = (int)ceil(T);
	double Td = T - floor(T);	

	int Ddown = (int)floor(D);
	int Dup = (int)ceil(D);
	double Dd = D - floor(D);

// LOAD corners of the interpolation cubie
	double PA12 = H_Lookup[Ddown][Rdown][Tup];
	double PA22 = H_Lookup[Ddown][Rup][Tup];
	double PA11 = H_Lookup[Ddown][Rdown][Tdown];
	double PA21 = H_Lookup[Ddown][Rup][Tdown];

	double PB12 = H_Lookup[Dup][Rdown][Tup];
	double PB22 = H_Lookup[Dup][Rup][Tup];
	double PB11 = H_Lookup[Dup][Rdown][Tdown];
	double PB21 = H_Lookup[Dup][Rup][Tdown];
		
// INTERPOLATE over angle rho
	double QA2 = (PA22 - PA12)*Rd + PA12;
	double QA1 = (PA21 - PA11)*Rd + PA11;
	
	double QB2 = (PB22 - PB12)*Rd + PB12;
	double QB1 = (PB21 - PB11)*Rd + PB11;
	
// INTERPOLATE over angle theta
	double RA1 = (QA2 - QA1)*Td + QA1;
	double RB1 = (QB2 - QB1)*Td + QB1;
// INTERPOLATE over  distance rOH
	double N = (RB1 - RA1)*Dd + RA1;

	return N;
}

//Initialize the aromatic rings
template <typename CHAIN_TYPE>
void InitRings(CHAIN_TYPE *chain, std::vector<Class_Ring>& Rings) {

     // Import protein definitions (such as residue names)
     using namespace definitions;

      for(ResidueIterator<CHAIN_TYPE> res1(*chain); !res1.end(); ++res1) {
		if ((*res1).residue_type == PHE){ 
			Class_Ring CurrentRing;
			Vector_3D CE1sc, CE2sc, CGsc, CZsc;
			CE1sc=(*res1)[CE1]->position;
			CE2sc=(*res1)[CE2]->position;
			CGsc=(*res1)[CG]->position;
			CZsc=(*res1)[CZ]->position;
			Vector_3D Phe_Centroid = (CGsc + CZsc)*0.5;
			Vector_3D Phe_Normal = cross_product((CE1sc - CGsc), (CE2sc - CGsc)).normalize();
			Phe_Normal = Phe_Normal + Phe_Centroid;
			CurrentRing.XYZ = Phe_Centroid;
			CurrentRing.Direction = Phe_Normal;
			CurrentRing.Intensity = 1.0;
			Rings.push_back(CurrentRing);
		} else if ((*res1).residue_type == TYR){
			Class_Ring CurrentRing;
			Vector_3D CE1sc, CE2sc, CGsc, CZsc;
			CE1sc=(*res1)[CE1]->position;
			CE2sc=(*res1)[CE2]->position;
			CGsc=(*res1)[CG]->position;
			CZsc=(*res1)[CZ]->position;
			Vector_3D Tyr_Centroid = (CGsc + CZsc)*0.5;
			Vector_3D Tyr_Normal = cross_product((CE1sc - CGsc), (CE2sc - CGsc)).normalize();
			Tyr_Normal = Tyr_Normal + Tyr_Centroid;
			CurrentRing.XYZ = Tyr_Centroid;
			CurrentRing.Direction = Tyr_Normal;
//			CurrentRing.Intensity = 0.84;
			CurrentRing.Intensity = 0.812;
			Rings.push_back(CurrentRing);
		} else if ((*res1).residue_type == HIS){
			Class_Ring CurrentRing;
//			Vector_3D NE2sc, CE1sc, CGsc, CD2sc;
//			NE2sc=(*res1)[NE2]->position;
			Vector_3D CE1sc, CGsc, CD2sc;
			CE1sc=(*res1)[CE1]->position;
			CD2sc=(*res1)[CD2]->position;
			CGsc=(*res1)[CG]->position;
//			Vector_3D His_Centroid = ((NE2sc + CE1sc)*0.5 + CGsc)*0.5;
			Vector_3D His_Middle = (CGsc + CD2sc)*0.5;
			Vector_3D His_Centroid = His_Middle*0.5527864045 + CE1sc*0.447213955;
			Vector_3D His_Normal = cross_product((CGsc - CE1sc),(CD2sc - CE1sc));
			His_Normal.normalize();
			His_Normal = His_Normal + His_Centroid;
			CurrentRing.XYZ = His_Centroid;
			CurrentRing.Direction = His_Normal;
//			CurrentRing.Intensity = 0.90;
			CurrentRing.Intensity = 0.69;
			Rings.push_back(CurrentRing);
		} else if ((*res1).residue_type == TRP){
			Class_Ring CurrentRing1;
			Vector_3D NE1sc, CE2sc, CGsc, CD2sc;
			NE1sc=(*res1)[NE1]->position;
			CE2sc=(*res1)[CE2]->position;
			CD2sc=(*res1)[CD2]->position;
			CGsc=(*res1)[CG]->position;
//			Vector_3D Trp5_Centroid = ((NE1sc + CE2sc)*0.5 + CGsc)*0.5;
			Vector_3D Trp5_Middle = (CGsc + CD2sc)*0.5;
			Vector_3D Trp5_Centroid = Trp5_Middle*0.5527864045 + NE1sc*0.447213955;
			Vector_3D Trp5_Normal = cross_product((CE2sc - CGsc),(NE1sc - CGsc));
			Trp5_Normal.normalize();
			Trp5_Normal = Trp5_Normal + Trp5_Centroid;
			CurrentRing1.XYZ = Trp5_Centroid;
			CurrentRing1.Direction = Trp5_Normal;
//			CurrentRing1.Intensity = 1.05; //LOL, the old intensity should have been 1.04 following Monya et al 2002
			CurrentRing1.Intensity = 0.62;
			Rings.push_back(CurrentRing1);
			Class_Ring CurrentRing2;
			Vector_3D CE3sc, CZ2sc, CH2sc;
			CE3sc=(*res1)[CE3]->position;
			CZ2sc=(*res1)[CZ2]->position;
			CH2sc=(*res1)[CH2]->position;
			Vector_3D Trp6_Centroid = (CE3sc + CZ2sc)*0.5;
			Vector_3D Trp6_Normal = cross_product((CH2sc - CE3sc), (CE2sc - CE3sc)).normalize();
			Trp6_Normal = Trp6_Normal + Trp6_Centroid;
			CurrentRing2.XYZ = Trp6_Centroid;
			CurrentRing2.Direction = Trp6_Normal;
//			CurrentRing2.Intensity = 1.02;
			CurrentRing2.Intensity = 1.04;
			Rings.push_back(CurrentRing2);
		}
	}
}
//Functions to check whether an atom has a positive charge etc...
bool Is_charged_positive(Atom *Positive_Atom){

     // Import protein definitions (such as residue names)
     using namespace definitions;

   if (((*Positive_Atom).residue)->residue_type == ARG) {
     if (((*Positive_Atom).atom_type == HH11)||((*Positive_Atom).atom_type == HH12)||((*Positive_Atom).atom_type == HH21)||((*Positive_Atom).atom_type == HH22)||((*Positive_Atom).atom_type == HE)) {
        return true;
     } else { 
         return false;
      }
   } else if (((*Positive_Atom).residue)->residue_type == LYS) {
     if (((*Positive_Atom).atom_type == HZ1)||((*Positive_Atom).atom_type == HZ2)||((*Positive_Atom).atom_type == HZ3)) {
        return true;
     } else { 
         return false;
      }
   } else if (((*Positive_Atom).residue)->residue_type == HIS) {
     if (((*Positive_Atom).atom_type == HD1)) {
        return true;
     } else { 
         return false;
      }
   } else if (((*Positive_Atom).residue)->residue_type == TRP) {
     if (((*Positive_Atom).atom_type == HE1)||((*Positive_Atom).atom_type == HD1)) {
        return true;
     } else { 
         return false;
      }
   } else if (((*Positive_Atom).residue)->residue_type == SER) {
     if (((*Positive_Atom).atom_type == HG)) {
        return true;
     } else { 
         return false;
      }
   } else if (((*Positive_Atom).residue)->residue_type == THR) {
     if (((*Positive_Atom).atom_type == HG1)) {
        return true;
     } else { 
         return false;
      }
   } else if (((*Positive_Atom).residue)->residue_type == TYR) {
     if (((*Positive_Atom).atom_type == HH)) {
        return true;
     } else { 
         return false;
      }
   } else {
      return false;
   }
 
}

bool Is_amide_positive(Atom *Positive_Atom){

     // Import protein definitions (such as residue names)
     using namespace definitions;

   if (((*Positive_Atom).atom_type == H)||((*Positive_Atom).atom_type == H1)||((*Positive_Atom).atom_type == H2)||((*Positive_Atom).atom_type == H3)) {
      return true;
   } else if (((*Positive_Atom).residue)->residue_type == ASN) {
      if (((*Positive_Atom).atom_type == HD21)||((*Positive_Atom).atom_type == HD22)) {
         return true;
      } else { 
         return false;
      }
   } else if (((*Positive_Atom).residue)->residue_type == GLN) {
      if (((*Positive_Atom).atom_type == HE21)||((*Positive_Atom).atom_type == HE22)) {
         return true;
      } else { 
         return false;
      }
   } else {
      return false;
   }
}

bool Is_charged_negative(Atom *Negative_Atom, int last_res){

     // Import protein definitions (such as residue names)
     using namespace definitions;


   if (((*Negative_Atom).residue)->index == last_res) {
      if (((*Negative_Atom).atom_type == O)||((*Negative_Atom).atom_type == OXT)) {
         return true;
      }
   }
   if (((*Negative_Atom).residue)->residue_type == ASP) {
      if (((*Negative_Atom).atom_type == OD1)||((*Negative_Atom).atom_type == OD2)) {
         return true;
      } else { 
         return false;
      }
   } else if (((*Negative_Atom).residue)->residue_type == GLU) {
      if (((*Negative_Atom).atom_type == OE1)||((*Negative_Atom).atom_type == OE2)) {
         return true;
      } else { 
         return false;
      }
   } else if (((*Negative_Atom).residue)->residue_type == SER) {
      if ((*Negative_Atom).atom_type == OG) {
         return true;
      } else { 
         return false;
      }
   } else if (((*Negative_Atom).residue)->residue_type == THR) {
      if ((*Negative_Atom).atom_type == OG1) {
         return true;
      } else { 
         return false;
      }
   } else if (((*Negative_Atom).residue)->residue_type == TYR) {
      if ((*Negative_Atom).atom_type == OH) {
         return true;
      } else { 
         return false;
      }
   } else {
      return false;
   }
}

bool Is_amide_negative(Atom *Negative_Atom, int last_res){

     // Import protein definitions (such as residue names)
     using namespace definitions;

   if (((*Negative_Atom).residue)->index != last_res) {
      if ((*Negative_Atom).atom_type == O) {
         return true;
      }
   }
   if (((*Negative_Atom).residue)->residue_type == ASN) {
      if ((*Negative_Atom).atom_type == OD1) {
         return true;
      } else { 
         return false;
      }
   } else if (((*Negative_Atom).residue)->residue_type == GLN) {
      if ((*Negative_Atom).atom_type == OE1) {
         return true;
      } else { 
         return false;
      }
   }
   return false;
}

// Find the extended primary bonding term, dPe
void Update_Primary_extended(std::vector<Atom*> CarboxylSC_O, std::vector<Atom*> CarbonylBB_O, std::vector<Atom*> AmideSC_O, std::vector<Atom*> AlcoholSC_O, Atom *O2_HB, double& dPe){

     // Import protein definitions (such as residue names)
     using namespace definitions;


   bool HB_flag = false;
   Atom *O3_HB;
   if ((*(O2_HB->residue->get_neighbour(+1))).residue_type != PRO) {
      Vector_3D H3_pos=(*(O2_HB->residue->get_neighbour(+1)))[H]->position;
      int i_H = (*(O2_HB->residue->get_neighbour(+1)))[H]->index;
//std::vector<Atom*> CarboxylSC_O;
      for (std::vector<Atom*>::iterator Atom_O = CarboxylSC_O.begin(); Atom_O<CarboxylSC_O.end(); ++Atom_O) {
         double distance = (H3_pos - (*Atom_O)->position).norm();
         int i_O  = (*Atom_O)->residue->index;
         if ((distance < HB_cutoff)&&( i_O != i_H)) {
            dPe = 0.8;
            O3_HB = (*Atom_O);
            HB_flag = true;
            break;
         }
      }
//std::vector<Atom*> CarbonylBB_O;
      if (HB_flag == false) {
         for (std::vector<Atom*>::iterator Atom_O = CarbonylBB_O.begin(); Atom_O<CarbonylBB_O.end(); ++Atom_O) {
            double distance = (H3_pos - (*Atom_O)->position).norm();
            if (distance < HB_cutoff) {
               dPe = 0.1;
               O3_HB = (*Atom_O);
               HB_flag = true;
               break;
            }
         }
      }
//std::vector<Atom*> AmideSC_O;
      if (HB_flag == false) {
         for (std::vector<Atom*>::iterator Atom_O = AmideSC_O.begin(); Atom_O<AmideSC_O.end(); ++Atom_O) {
            double distance = (H3_pos - (*Atom_O)->position).norm();
            if (distance < HB_cutoff) {
               dPe = 0.1;
               O3_HB = (*Atom_O);
               HB_flag = true;
               break;
            }
         }
      }
//std::vector<Atom*> AlcoholSC_O;
      if (HB_flag == false) {
         for (std::vector<Atom*>::iterator Atom_O = AlcoholSC_O.begin(); Atom_O<AlcoholSC_O.end(); ++Atom_O) {
            double distance = (H3_pos - (*Atom_O)->position).norm();
            if (distance < HB_cutoff) {
               dPe = 0.05;
               O3_HB = (*Atom_O);
               HB_flag = true;
               break;
            }
         }
      }
   }
   if (dPe > 0) {
//      std::cout << "Primary_ext:      " << O3_HB->atom_type << "           " << O3_HB->residue->residue_type << O3_HB->residue->index+1 << "    " << dPe << std::endl;	
   }
}

// Find the secondary bonding term, dS, and the secondary extended bonding term, dSe
void Update_Secondary(std::vector<Atom*> CarboxylSC_O, std::vector<Atom*> CarbonylBB_O, std::vector<Atom*> AmideSC_O, std::vector<Atom*> AlcoholSC_O, std::vector<Atom*> AmideBB_H, std::vector<Atom*> AmideSC_H, std::vector<Atom*> AlcoholSC_H, std::vector<Atom*> Charged_H, std::vector<Atom*> OtherSC_H, Atom *O0, double& dS, double& dSe){

     // Import protein definitions (such as residue names)
     using namespace definitions;

   bool HB_flag = false;
   Atom *atom_HB2;
//WORKAROUND OR FIX WARNING:
   atom_HB2 = O0;
   Vector_3D O0_pos=(*O0).position;
//std::vector<Atom*> Charged_H;
   for (std::vector<Atom*>::iterator Atom_H = Charged_H.begin(); Atom_H<Charged_H.end(); ++Atom_H) {
      double distance = (O0_pos - (*Atom_H)->position).norm();
      if (distance < HB_cutoff) {
         dS = 0.8;
          atom_HB2=(*Atom_H);
         HB_flag = true;
         break;
      }
   }
//std::vector<Atom*> AmideBB_H;
   if (HB_flag == false) {
      int index_O0 = (O0->residue)->index;
      for (std::vector<Atom*>::iterator Atom_H = AmideBB_H.begin(); Atom_H<AmideBB_H.end(); ++Atom_H) {
         int index_Atom_H = (*Atom_H)->residue->index;
         double distance = (O0_pos - (*Atom_H)->position).norm();
         if ((distance < HB_cutoff)&&(index_Atom_H != index_O0)) {
            dS = 0.3;
            atom_HB2=(*Atom_H);
            HB_flag = true;
            break;
         }
      }
   }
//std::vector<Atom*> AmideSC_H;
   if (HB_flag == false) {
      for (std::vector<Atom*>::iterator Atom_H = AmideSC_H.begin(); Atom_H<AmideSC_H.end(); ++Atom_H) {
      double distance = (O0_pos - (*Atom_H)->position).norm();
         if (distance < HB_cutoff) {
            dS = 0.3;
            atom_HB2=(*Atom_H);
            HB_flag = true;
            break;
         }
      }
   }
//std::vector<Atom*> AlcoholSC_H;
   if (HB_flag == false) {
      for (std::vector<Atom*>::iterator Atom_H = AlcoholSC_H.begin(); Atom_H<AlcoholSC_H.end(); ++Atom_H) {
      double distance = (O0_pos - (*Atom_H)->position).norm();
         if (distance < HB_cutoff) {
            dS = 0.15;
            atom_HB2=(*Atom_H);
            HB_flag = true;
            break;
         }
      }
   }
//std::vector<Atom*> OtherSC_H;
   if (HB_flag == false) {
      for (std::vector<Atom*>::iterator Atom_H = OtherSC_H.begin(); Atom_H<OtherSC_H.end(); ++Atom_H) {
      double distance = (O0_pos - (*Atom_H)->position).norm();
         if (distance < HB_cutoff) {
            dS = 0.15;
            atom_HB2=(*Atom_H);
            HB_flag = true;
            break;
         }
      }
   }
   if (dS > 0) {
//      std::cout << "Secondary:  " << (*atom_HB2).atom_type << "   " << ((*atom_HB2).residue)->residue_type << ((*atom_HB2).residue)->index+1 << "    " << dS << std::endl;
   dSe = 0.0;
      Atom *atom_HB3;
      std::vector<Atom*> SC_ext;
      if ((*atom_HB2).atom_type == H) {
         Residue *SC_res;
         SC_res=atom_HB2->residue->get_neighbour(-1);
         SC_ext.push_back((*SC_res)[O]);
   // THR SIDECHAIN ALCOHOL; Search for HB partner -- OG1
      } else if (((*atom_HB2).atom_type == HG)&&(((*atom_HB2).residue)->residue_type == SER)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[OG]);
   // THR SIDECHAIN ALCOHOL; Search for HB partner -- OG1
      } else if (((*atom_HB2).atom_type == HG1)&&(((*atom_HB2).residue)->residue_type == THR)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[OG1]);
   // TYR SIDECHAIN ALCOHOL; Search for HB partner -- OH
      } else if (((*atom_HB2).atom_type == HH)&&(((*atom_HB2).residue)->residue_type == TYR)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[OH]);
   // TRP SIDECHAIN;         Search for HB partner -- HE1 HD1
      } else if (((*atom_HB2).atom_type == HE1)&&(((*atom_HB2).residue)->residue_type == TRP)) {
         Residue *SC_res;
        SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[HD1]);
      } else if (((*atom_HB2).atom_type == HD1)&&(((*atom_HB2).residue)->residue_type == TRP)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[HE1]);
   // N-TERM;                Search for HB partner -- H1 H2 H3
      } else if (((*atom_HB2).atom_type == H1)&&(((*atom_HB2).residue)->index == 0)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[H2]);
         SC_ext.push_back((*SC_res)[H3]);
      } else if (((*atom_HB2).atom_type == H2)&&(((*atom_HB2).residue)->index == 0)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[H1]);
         SC_ext.push_back((*SC_res)[H3]);
      } else if (((*atom_HB2).atom_type == H3)&&(((*atom_HB2).residue)->index == 0)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[H1]);
         SC_ext.push_back((*SC_res)[H2]);
   // ASN SIDECHAIN AMIDE;   Search for HB partner -- OD1 HD22 HD21
      } else if (((*atom_HB2).atom_type == OD1)&&(((*atom_HB2).residue)->residue_type == ASN)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[HD21]);
         SC_ext.push_back((*SC_res)[HD22]);
      } else if (((*atom_HB2).atom_type == HD21)&&(((*atom_HB2).residue)->residue_type == ASN)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[OD1]);
         SC_ext.push_back((*SC_res)[HD22]);
      } else if (((*atom_HB2).atom_type == HD22)&&(((*atom_HB2).residue)->residue_type == ASN)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[OD1]);
         SC_ext.push_back((*SC_res)[HD21]);
   // GLN SIDECHAIN AMIDE;   Search for HB partner -- OE1 HE22 HE21
      } else if (((*atom_HB2).atom_type == OE1)&&(((*atom_HB2).residue)->residue_type == GLN)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[HE21]);
         SC_ext.push_back((*SC_res)[HE22]);
      } else if (((*atom_HB2).atom_type == HE21)&&(((*atom_HB2).residue)->residue_type == GLN)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[OE1]);
         SC_ext.push_back((*SC_res)[HE22]);
      } else if (((*atom_HB2).atom_type == HE22)&&(((*atom_HB2).residue)->residue_type == GLN)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[OE1]);
         SC_ext.push_back((*SC_res)[HE22]);
   // ARG SIDECHAIN BASIC;   Search for HB partner -- HH11 HH12 HH21 HH22 HE
      } else if (((*atom_HB2).atom_type == HH11)&&(((*atom_HB2).residue)->residue_type == ARG)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[HH11]);
         SC_ext.push_back((*SC_res)[HH21]);
         SC_ext.push_back((*SC_res)[HH22]);
         SC_ext.push_back((*SC_res)[HE]);
      } else if (((*atom_HB2).atom_type == HH12)&&(((*atom_HB2).residue)->residue_type == ARG)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[HH11]);
         SC_ext.push_back((*SC_res)[HH21]);
         SC_ext.push_back((*SC_res)[HH22]);
         SC_ext.push_back((*SC_res)[HE]);
      } else if (((*atom_HB2).atom_type == HH21)&&(((*atom_HB2).residue)->residue_type == ARG)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[HH11]);
         SC_ext.push_back((*SC_res)[HH12]);
         SC_ext.push_back((*SC_res)[HH22]);
         SC_ext.push_back((*SC_res)[HE]);
      } else if (((*atom_HB2).atom_type == HH22)&&(((*atom_HB2).residue)->residue_type == ARG)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[HH11]);
         SC_ext.push_back((*SC_res)[HH12]);
         SC_ext.push_back((*SC_res)[HH21]);
         SC_ext.push_back((*SC_res)[HE]);
      } else if (((*atom_HB2).atom_type == HE)&&(((*atom_HB2).residue)->residue_type == ARG)) {
         Residue *SC_res;
         SC_res=atom_HB2->residue;
         SC_ext.push_back((*SC_res)[HH11]);
         SC_ext.push_back((*SC_res)[HH12]);
         SC_ext.push_back((*SC_res)[HH21]);
         SC_ext.push_back((*SC_res)[HH22]);
      }
      if (SC_ext.size() > 0) {
         for (std::vector<Atom*>::iterator at1 = SC_ext.begin(); at1 < SC_ext.end(); at1++) {
            int index_at1 = ((*at1)->residue)->index;
            Vector_3D at1_pos = (*at1)->position;
            if ((Is_amide_negative((*at1), 100000))||(Is_charged_negative((*at1), 100000))){
               bool HB2_flag = false;
   
   //std::vector<Atom*> Charged_H;
               for (std::vector<Atom*>::iterator at2 = Charged_H.begin(); at2<Charged_H.end(); ++at2) {
                  int index_at2 = (*at2)->residue->index;
                  double distance = (at1_pos - (*at2)->position).norm();
                  if ((distance < HB_cutoff)&& (index_at1 != index_at2)) {
                     dSe = 0.3;
                     atom_HB3=(*at2);
                     HB2_flag = true;
                     break;
                  }
               }
   //std::vector<Atom*> AmideBB_H;
               if (HB2_flag == false) {
                  for (std::vector<Atom*>::iterator at2 = AmideBB_H.begin(); at2<AmideBB_H.end(); ++at2) {
                     double distance = (at1_pos - (*at2)->position).norm();
                     int index_at2 = (*at2)->residue->index;
                     if ((distance < HB_cutoff)&&(!((index_at2 == index_at1)&&((*at1)->atom_type == O)))) {
                        dSe = 0.2;
                        atom_HB3=(*at2);
                        HB2_flag = true;
                        break;
                     }
                  }
               }
   //std::vector<Atom*> AmideSC_H;
               if (HB2_flag == false) {
                  for (std::vector<Atom*>::iterator at2 = AmideSC_H.begin(); at2<AmideSC_H.end(); ++at2) {
                     int index_at2 = (*at2)->residue->index;
                     double distance = (at1_pos - (*at2)->position).norm();
                     if ((distance < HB_cutoff)&& (index_at1 != index_at2)) {
                        dSe = 0.2;
                        atom_HB3=(*at2);
                        HB2_flag = true;
                        break;
                     }
                  }
               }
   //std::vector<Atom*> AlcoholSC_H;
               if (HB2_flag == false) {
                  for (std::vector<Atom*>::iterator at2 = AlcoholSC_H.begin(); at2<AlcoholSC_H.end(); ++at2) {
                     int index_at2 = (*at2)->residue->index;
                     double distance = (at1_pos - (*at2)->position).norm();
                     if ((distance < HB_cutoff)&& (index_at1 != index_at2)) {
                        dSe = 0.1;
                        atom_HB3=(*at2);
                        HB2_flag = true;
                        break;
                     }
                  }
               }
   //std::vector<Atom*> OtherSC_H;
               if (HB2_flag == false) {
                  for (std::vector<Atom*>::iterator at2 = OtherSC_H.begin(); at2<OtherSC_H.end(); ++at2) {
                     int index_at2 = (*at2)->residue->index;
                     double distance = (at1_pos - (*at2)->position).norm();
                     if ((distance < HB_cutoff)&& (index_at1 != index_at2)) {
                        dSe = 0.1;
                        atom_HB3=(*at2);
                        HB2_flag = true;
                        break;
                     }
                  }
               }
            } else if ((Is_amide_positive((*at1)))||(Is_charged_positive((*at1)))){
               bool HB2_flag = false;
               Vector_3D at1_pos = (*at1)->position;
   //std::vector<Atom*> CarboxylSC_O;
               for (std::vector<Atom*>::iterator at2 = CarboxylSC_O.begin(); at2<CarboxylSC_O.end(); ++at2) {
                  double distance = (at1_pos - (*at2)->position).norm();
                  int i_O  = (*at2)->residue->index;
                  int i_H  = (*at1)->residue->index;
                  if ((distance < HB_cutoff)) {
                     if (!(  ((*at1)->atom_type == H)&&( i_O == i_H)  )){
                        dSe = 0.3;
                        atom_HB3 = (*at2);
                        HB2_flag = true;
                        break;
                     }
                  }
               }
   //std::vector<Atom*> CarbonylBB_O;
               if (HB2_flag == false) {
                  for (std::vector<Atom*>::iterator at2 = CarbonylBB_O.begin(); at2<CarbonylBB_O.end(); ++at2) {
                     double distance = (at1_pos - (*at2)->position).norm();
                     if (distance < HB_cutoff) {
                        dSe = 0.2;
                        atom_HB3 = (*at2);
                        HB2_flag = true;         
                        break;
                     }
                  }
               }
   //std::vector<Atom*> AmideSC_O;
               if (HB2_flag == false) {
                  for (std::vector<Atom*>::iterator at2 = AmideSC_O.begin(); at2<AmideSC_O.end(); ++at2) {
                     double distance = (at1_pos - (*at2)->position).norm();
                     if (distance < HB_cutoff) {
                        dSe = 0.2;
                        atom_HB3 = (*at2);
                        HB2_flag = true;
                        break;
                     }
                  }
               }
   //std::vector<Atom*> AlcoholSC_O;
               if (HB2_flag == false) {
                  for (std::vector<Atom*>::iterator at2 = AlcoholSC_O.begin(); at2<AlcoholSC_O.end(); ++at2) {
                     double distance = (at1_pos - (*at2)->position).norm();
                     if (distance < HB_cutoff) {
                        dSe = 0.05;
                        atom_HB3 = (*at2);
                        HB2_flag = true;
                        break;
                     }
                  }
               }
            }
         }
      }
      if (dSe > 0) {
//         std::cout << "Secondary_ext:  " << (*atom_HB3).atom_type << "   " << ((*atom_HB3).residue)->residue_type << ((*atom_HB3).residue)->index+1 << "    " << dSe << std::endl;
      }
   }
}

}

#endif
